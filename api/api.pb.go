// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api // import "github.com/sasaxie/tron-monitor/api"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/sasaxie/tron-monitor/core"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReturnResponseCode int32

const (
	Return_SUCCESS                      ReturnResponseCode = 0
	Return_SIGERROR                     ReturnResponseCode = 1
	Return_CONTRACT_VALIDATE_ERROR      ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR           ReturnResponseCode = 3
	Return_BANDWITH_ERROR               ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR        ReturnResponseCode = 5
	Return_TAPOS_ERROR                  ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR    ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR ReturnResponseCode = 8
	Return_SERVER_BUSY                  ReturnResponseCode = 9
	Return_OTHER_ERROR                  ReturnResponseCode = 20
)

var ReturnResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGERROR",
	2:  "CONTRACT_VALIDATE_ERROR",
	3:  "CONTRACT_EXE_ERROR",
	4:  "BANDWITH_ERROR",
	5:  "DUP_TRANSACTION_ERROR",
	6:  "TAPOS_ERROR",
	7:  "TOO_BIG_TRANSACTION_ERROR",
	8:  "TRANSACTION_EXPIRATION_ERROR",
	9:  "SERVER_BUSY",
	20: "OTHER_ERROR",
}
var ReturnResponseCode_value = map[string]int32{
	"SUCCESS":                      0,
	"SIGERROR":                     1,
	"CONTRACT_VALIDATE_ERROR":      2,
	"CONTRACT_EXE_ERROR":           3,
	"BANDWITH_ERROR":               4,
	"DUP_TRANSACTION_ERROR":        5,
	"TAPOS_ERROR":                  6,
	"TOO_BIG_TRANSACTION_ERROR":    7,
	"TRANSACTION_EXPIRATION_ERROR": 8,
	"SERVER_BUSY":                  9,
	"OTHER_ERROR":                  20,
}

func (x ReturnResponseCode) String() string {
	return proto.EnumName(ReturnResponseCode_name, int32(x))
}
func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{0, 0}
}

type Return struct {
	Result               bool               `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code                 ReturnResponseCode `protobuf:"varint,2,opt,name=code,proto3,enum=protocol.ReturnResponseCode" json:"code,omitempty"`
	Message              []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Return) Reset()         { *m = Return{} }
func (m *Return) String() string { return proto.CompactTextString(m) }
func (*Return) ProtoMessage()    {}
func (*Return) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{0}
}
func (m *Return) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Return.Unmarshal(m, b)
}
func (m *Return) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Return.Marshal(b, m, deterministic)
}
func (dst *Return) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Return.Merge(dst, src)
}
func (m *Return) XXX_Size() int {
	return xxx_messageInfo_Return.Size(m)
}
func (m *Return) XXX_DiscardUnknown() {
	xxx_messageInfo_Return.DiscardUnknown(m)
}

var xxx_messageInfo_Return proto.InternalMessageInfo

func (m *Return) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *Return) GetCode() ReturnResponseCode {
	if m != nil {
		return m.Code
	}
	return Return_SUCCESS
}

func (m *Return) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type BlockReference struct {
	BlockNum             int64    `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReference) Reset()         { *m = BlockReference{} }
func (m *BlockReference) String() string { return proto.CompactTextString(m) }
func (*BlockReference) ProtoMessage()    {}
func (*BlockReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{1}
}
func (m *BlockReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockReference.Unmarshal(m, b)
}
func (m *BlockReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockReference.Marshal(b, m, deterministic)
}
func (dst *BlockReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReference.Merge(dst, src)
}
func (m *BlockReference) XXX_Size() int {
	return xxx_messageInfo_BlockReference.Size(m)
}
func (m *BlockReference) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReference.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReference proto.InternalMessageInfo

func (m *BlockReference) GetBlockNum() int64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *BlockReference) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type WitnessList struct {
	Witnesses            []*core.Witness `protobuf:"bytes,1,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WitnessList) Reset()         { *m = WitnessList{} }
func (m *WitnessList) String() string { return proto.CompactTextString(m) }
func (*WitnessList) ProtoMessage()    {}
func (*WitnessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{2}
}
func (m *WitnessList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WitnessList.Unmarshal(m, b)
}
func (m *WitnessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WitnessList.Marshal(b, m, deterministic)
}
func (dst *WitnessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessList.Merge(dst, src)
}
func (m *WitnessList) XXX_Size() int {
	return xxx_messageInfo_WitnessList.Size(m)
}
func (m *WitnessList) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessList.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessList proto.InternalMessageInfo

func (m *WitnessList) GetWitnesses() []*core.Witness {
	if m != nil {
		return m.Witnesses
	}
	return nil
}

type AssetIssueList struct {
	AssetIssue           []*core.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue,proto3" json:"assetIssue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AssetIssueList) Reset()         { *m = AssetIssueList{} }
func (m *AssetIssueList) String() string { return proto.CompactTextString(m) }
func (*AssetIssueList) ProtoMessage()    {}
func (*AssetIssueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{3}
}
func (m *AssetIssueList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetIssueList.Unmarshal(m, b)
}
func (m *AssetIssueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetIssueList.Marshal(b, m, deterministic)
}
func (dst *AssetIssueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetIssueList.Merge(dst, src)
}
func (m *AssetIssueList) XXX_Size() int {
	return xxx_messageInfo_AssetIssueList.Size(m)
}
func (m *AssetIssueList) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetIssueList.DiscardUnknown(m)
}

var xxx_messageInfo_AssetIssueList proto.InternalMessageInfo

func (m *AssetIssueList) GetAssetIssue() []*core.AssetIssueContract {
	if m != nil {
		return m.AssetIssue
	}
	return nil
}

type BlockList struct {
	Block                []*core.Block `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BlockList) Reset()         { *m = BlockList{} }
func (m *BlockList) String() string { return proto.CompactTextString(m) }
func (*BlockList) ProtoMessage()    {}
func (*BlockList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{4}
}
func (m *BlockList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockList.Unmarshal(m, b)
}
func (m *BlockList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockList.Marshal(b, m, deterministic)
}
func (dst *BlockList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockList.Merge(dst, src)
}
func (m *BlockList) XXX_Size() int {
	return xxx_messageInfo_BlockList.Size(m)
}
func (m *BlockList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockList proto.InternalMessageInfo

func (m *BlockList) GetBlock() []*core.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type TransactionList struct {
	Transaction          []*core.Transaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TransactionList) Reset()         { *m = TransactionList{} }
func (m *TransactionList) String() string { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()    {}
func (*TransactionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{5}
}
func (m *TransactionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionList.Unmarshal(m, b)
}
func (m *TransactionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionList.Marshal(b, m, deterministic)
}
func (dst *TransactionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionList.Merge(dst, src)
}
func (m *TransactionList) XXX_Size() int {
	return xxx_messageInfo_TransactionList.Size(m)
}
func (m *TransactionList) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionList.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionList proto.InternalMessageInfo

func (m *TransactionList) GetTransaction() []*core.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Gossip node list
type NodeList struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeList) Reset()         { *m = NodeList{} }
func (m *NodeList) String() string { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()    {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{6}
}
func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeList.Unmarshal(m, b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeList.Marshal(b, m, deterministic)
}
func (dst *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(dst, src)
}
func (m *NodeList) XXX_Size() int {
	return xxx_messageInfo_NodeList.Size(m)
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	Address              *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{7}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	Host                 []byte   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{8}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetHost() []byte {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{9}
}
func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (dst *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(dst, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

type NumberMessage struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberMessage) Reset()         { *m = NumberMessage{} }
func (m *NumberMessage) String() string { return proto.CompactTextString(m) }
func (*NumberMessage) ProtoMessage()    {}
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{10}
}
func (m *NumberMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberMessage.Unmarshal(m, b)
}
func (m *NumberMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberMessage.Marshal(b, m, deterministic)
}
func (dst *NumberMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberMessage.Merge(dst, src)
}
func (m *NumberMessage) XXX_Size() int {
	return xxx_messageInfo_NumberMessage.Size(m)
}
func (m *NumberMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NumberMessage proto.InternalMessageInfo

func (m *NumberMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BytesMessage struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BytesMessage) Reset()         { *m = BytesMessage{} }
func (m *BytesMessage) String() string { return proto.CompactTextString(m) }
func (*BytesMessage) ProtoMessage()    {}
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{11}
}
func (m *BytesMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BytesMessage.Unmarshal(m, b)
}
func (m *BytesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BytesMessage.Marshal(b, m, deterministic)
}
func (dst *BytesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesMessage.Merge(dst, src)
}
func (m *BytesMessage) XXX_Size() int {
	return xxx_messageInfo_BytesMessage.Size(m)
}
func (m *BytesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BytesMessage proto.InternalMessageInfo

func (m *BytesMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TimeMessage struct {
	BeginInMilliseconds  int64    `protobuf:"varint,1,opt,name=beginInMilliseconds,proto3" json:"beginInMilliseconds,omitempty"`
	EndInMilliseconds    int64    `protobuf:"varint,2,opt,name=endInMilliseconds,proto3" json:"endInMilliseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeMessage) Reset()         { *m = TimeMessage{} }
func (m *TimeMessage) String() string { return proto.CompactTextString(m) }
func (*TimeMessage) ProtoMessage()    {}
func (*TimeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{12}
}
func (m *TimeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeMessage.Unmarshal(m, b)
}
func (m *TimeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeMessage.Marshal(b, m, deterministic)
}
func (dst *TimeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeMessage.Merge(dst, src)
}
func (m *TimeMessage) XXX_Size() int {
	return xxx_messageInfo_TimeMessage.Size(m)
}
func (m *TimeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TimeMessage proto.InternalMessageInfo

func (m *TimeMessage) GetBeginInMilliseconds() int64 {
	if m != nil {
		return m.BeginInMilliseconds
	}
	return 0
}

func (m *TimeMessage) GetEndInMilliseconds() int64 {
	if m != nil {
		return m.EndInMilliseconds
	}
	return 0
}

type BlockLimit struct {
	StartNum             int64    `protobuf:"varint,1,opt,name=startNum,proto3" json:"startNum,omitempty"`
	EndNum               int64    `protobuf:"varint,2,opt,name=endNum,proto3" json:"endNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockLimit) Reset()         { *m = BlockLimit{} }
func (m *BlockLimit) String() string { return proto.CompactTextString(m) }
func (*BlockLimit) ProtoMessage()    {}
func (*BlockLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{13}
}
func (m *BlockLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockLimit.Unmarshal(m, b)
}
func (m *BlockLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockLimit.Marshal(b, m, deterministic)
}
func (dst *BlockLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockLimit.Merge(dst, src)
}
func (m *BlockLimit) XXX_Size() int {
	return xxx_messageInfo_BlockLimit.Size(m)
}
func (m *BlockLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockLimit.DiscardUnknown(m)
}

var xxx_messageInfo_BlockLimit proto.InternalMessageInfo

func (m *BlockLimit) GetStartNum() int64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *BlockLimit) GetEndNum() int64 {
	if m != nil {
		return m.EndNum
	}
	return 0
}

type TransactionLimit struct {
	TransactionId        []byte   `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	LimitNum             int64    `protobuf:"varint,2,opt,name=limitNum,proto3" json:"limitNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionLimit) Reset()         { *m = TransactionLimit{} }
func (m *TransactionLimit) String() string { return proto.CompactTextString(m) }
func (*TransactionLimit) ProtoMessage()    {}
func (*TransactionLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{14}
}
func (m *TransactionLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionLimit.Unmarshal(m, b)
}
func (m *TransactionLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionLimit.Marshal(b, m, deterministic)
}
func (dst *TransactionLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionLimit.Merge(dst, src)
}
func (m *TransactionLimit) XXX_Size() int {
	return xxx_messageInfo_TransactionLimit.Size(m)
}
func (m *TransactionLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionLimit.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionLimit proto.InternalMessageInfo

func (m *TransactionLimit) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *TransactionLimit) GetLimitNum() int64 {
	if m != nil {
		return m.LimitNum
	}
	return 0
}

type AccountPaginated struct {
	Account              *core.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Offset               int64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountPaginated) Reset()         { *m = AccountPaginated{} }
func (m *AccountPaginated) String() string { return proto.CompactTextString(m) }
func (*AccountPaginated) ProtoMessage()    {}
func (*AccountPaginated) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{15}
}
func (m *AccountPaginated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountPaginated.Unmarshal(m, b)
}
func (m *AccountPaginated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountPaginated.Marshal(b, m, deterministic)
}
func (dst *AccountPaginated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPaginated.Merge(dst, src)
}
func (m *AccountPaginated) XXX_Size() int {
	return xxx_messageInfo_AccountPaginated.Size(m)
}
func (m *AccountPaginated) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPaginated.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPaginated proto.InternalMessageInfo

func (m *AccountPaginated) GetAccount() *core.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountPaginated) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AccountPaginated) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type TimePaginatedMessage struct {
	TimeMessage          *TimeMessage `protobuf:"bytes,1,opt,name=timeMessage,proto3" json:"timeMessage,omitempty"`
	Offset               int64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TimePaginatedMessage) Reset()         { *m = TimePaginatedMessage{} }
func (m *TimePaginatedMessage) String() string { return proto.CompactTextString(m) }
func (*TimePaginatedMessage) ProtoMessage()    {}
func (*TimePaginatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{16}
}
func (m *TimePaginatedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimePaginatedMessage.Unmarshal(m, b)
}
func (m *TimePaginatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimePaginatedMessage.Marshal(b, m, deterministic)
}
func (dst *TimePaginatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePaginatedMessage.Merge(dst, src)
}
func (m *TimePaginatedMessage) XXX_Size() int {
	return xxx_messageInfo_TimePaginatedMessage.Size(m)
}
func (m *TimePaginatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePaginatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TimePaginatedMessage proto.InternalMessageInfo

func (m *TimePaginatedMessage) GetTimeMessage() *TimeMessage {
	if m != nil {
		return m.TimeMessage
	}
	return nil
}

func (m *TimePaginatedMessage) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TimePaginatedMessage) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type AccountNetMessage struct {
	FreeNetUsed          int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit         int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed              int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit             int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed         map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit        map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit        int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight       int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccountNetMessage) Reset()         { *m = AccountNetMessage{} }
func (m *AccountNetMessage) String() string { return proto.CompactTextString(m) }
func (*AccountNetMessage) ProtoMessage()    {}
func (*AccountNetMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_62e608ddc1e42e6f, []int{17}
}
func (m *AccountNetMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountNetMessage.Unmarshal(m, b)
}
func (m *AccountNetMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountNetMessage.Marshal(b, m, deterministic)
}
func (dst *AccountNetMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountNetMessage.Merge(dst, src)
}
func (m *AccountNetMessage) XXX_Size() int {
	return xxx_messageInfo_AccountNetMessage.Size(m)
}
func (m *AccountNetMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountNetMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AccountNetMessage proto.InternalMessageInfo

func (m *AccountNetMessage) GetFreeNetUsed() int64 {
	if m != nil {
		return m.FreeNetUsed
	}
	return 0
}

func (m *AccountNetMessage) GetFreeNetLimit() int64 {
	if m != nil {
		return m.FreeNetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetNetUsed() int64 {
	if m != nil {
		return m.NetUsed
	}
	return 0
}

func (m *AccountNetMessage) GetNetLimit() int64 {
	if m != nil {
		return m.NetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetAssetNetUsed() map[string]int64 {
	if m != nil {
		return m.AssetNetUsed
	}
	return nil
}

func (m *AccountNetMessage) GetAssetNetLimit() map[string]int64 {
	if m != nil {
		return m.AssetNetLimit
	}
	return nil
}

func (m *AccountNetMessage) GetTotalNetLimit() int64 {
	if m != nil {
		return m.TotalNetLimit
	}
	return 0
}

func (m *AccountNetMessage) GetTotalNetWeight() int64 {
	if m != nil {
		return m.TotalNetWeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Return)(nil), "protocol.Return")
	proto.RegisterType((*BlockReference)(nil), "protocol.BlockReference")
	proto.RegisterType((*WitnessList)(nil), "protocol.WitnessList")
	proto.RegisterType((*AssetIssueList)(nil), "protocol.AssetIssueList")
	proto.RegisterType((*BlockList)(nil), "protocol.BlockList")
	proto.RegisterType((*TransactionList)(nil), "protocol.TransactionList")
	proto.RegisterType((*NodeList)(nil), "protocol.NodeList")
	proto.RegisterType((*Node)(nil), "protocol.Node")
	proto.RegisterType((*Address)(nil), "protocol.Address")
	proto.RegisterType((*EmptyMessage)(nil), "protocol.EmptyMessage")
	proto.RegisterType((*NumberMessage)(nil), "protocol.NumberMessage")
	proto.RegisterType((*BytesMessage)(nil), "protocol.BytesMessage")
	proto.RegisterType((*TimeMessage)(nil), "protocol.TimeMessage")
	proto.RegisterType((*BlockLimit)(nil), "protocol.BlockLimit")
	proto.RegisterType((*TransactionLimit)(nil), "protocol.TransactionLimit")
	proto.RegisterType((*AccountPaginated)(nil), "protocol.AccountPaginated")
	proto.RegisterType((*TimePaginatedMessage)(nil), "protocol.TimePaginatedMessage")
	proto.RegisterType((*AccountNetMessage)(nil), "protocol.AccountNetMessage")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountNetMessage.AssetNetLimitEntry")
	proto.RegisterMapType((map[string]int64)(nil), "protocol.AccountNetMessage.AssetNetUsedEntry")
	proto.RegisterEnum("protocol.ReturnResponseCode", ReturnResponseCode_name, ReturnResponseCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error)
	BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error)
	UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error)
	CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error)
	GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TransferAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/FreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error) {
	out := new(AccountNetMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TotalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNextMaintenanceTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error)
	BroadcastTransaction(context.Context, *core.Transaction) (*Return, error)
	UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error)
	VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error)
	CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error)
	UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error)
	CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error)
	CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error)
	TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error)
	ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error)
	FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error)
	UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error)
	UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error)
	WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error)
	UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error)
	GetAccountNet(context.Context, *core.Account) (*AccountNetMessage, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	GetBlockById(context.Context, *BytesMessage) (*core.Block, error)
	GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error)
	GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountNet(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNextMaintenanceTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNextMaintenanceTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Wallet_FreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeBalance",
			Handler:    _Wallet_UnfreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeAsset",
			Handler:    _Wallet_UnfreezeAsset_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Wallet_WithdrawBalance_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Wallet_UpdateAsset_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAccountNet",
			Handler:    _Wallet_GetAccountNet_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockById",
			Handler:    _Wallet_GetBlockById_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext",
			Handler:    _Wallet_GetBlockByLimitNext_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum",
			Handler:    _Wallet_GetBlockByLatestNum_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Wallet_GetTransactionById_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetNextMaintenanceTime",
			Handler:    _Wallet_GetNextMaintenanceTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletSolidityClient is the client API for WalletSolidity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletSolidityClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
}

type walletSolidityClient struct {
	cc *grpc.ClientConn
}

func NewWalletSolidityClient(cc *grpc.ClientConn) WalletSolidityClient {
	return &walletSolidityClient{cc}
}

func (c *walletSolidityClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSolidityServer is the server API for WalletSolidity service.
type WalletSolidityServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
}

func RegisterWalletSolidityServer(s *grpc.Server, srv WalletSolidityServer) {
	s.RegisterService(&_WalletSolidity_serviceDesc, srv)
}

func _WalletSolidity_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletSolidity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletSolidity",
	HandlerType: (*WalletSolidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletSolidity_GetAccount_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _WalletSolidity_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _WalletSolidity_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _WalletSolidity_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _WalletSolidity_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletExtensionClient is the client API for WalletExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletExtensionClient interface {
	GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
}

type walletExtensionClient struct {
	cc *grpc.ClientConn
}

func NewWalletExtensionClient(cc *grpc.ClientConn) WalletExtensionClient {
	return &walletExtensionClient{cc}
}

func (c *walletExtensionClient) GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsFromThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsToThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletExtensionServer is the server API for WalletExtension service.
type WalletExtensionServer interface {
	GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error)
	GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error)
}

func RegisterWalletExtensionServer(s *grpc.Server, srv WalletExtensionServer) {
	s.RegisterService(&_WalletExtension_serviceDesc, srv)
}

func _WalletExtension_GetTransactionsFromThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsFromThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsToThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletExtension_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletExtension",
	HandlerType: (*WalletExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionsFromThis",
			Handler:    _WalletExtension_GetTransactionsFromThis_Handler,
		},
		{
			MethodName: "GetTransactionsToThis",
			Handler:    _WalletExtension_GetTransactionsToThis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	// for tapos
	GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error) {
	out := new(BlockReference)
	err := c.cc.Invoke(ctx, "/protocol.Database/getBlockReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error) {
	out := new(core.DynamicProperties)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetDynamicProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	// for tapos
	GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetBlockReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockReference(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetDynamicProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockReference",
			Handler:    _Database_GetBlockReference_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Database_GetDynamicProperties_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Database_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Database_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_api_62e608ddc1e42e6f) }

var fileDescriptor_api_62e608ddc1e42e6f = []byte{
	// 2171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x5b, 0x6f, 0x1b, 0xc7,
	0x15, 0x16, 0x75, 0xd7, 0x11, 0x75, 0x3b, 0xba, 0x53, 0x92, 0x2d, 0x4f, 0xdc, 0x54, 0x48, 0x6a,
	0x31, 0x96, 0x51, 0x38, 0xd7, 0x3a, 0xa4, 0xc4, 0xc8, 0x6c, 0x6c, 0x4a, 0x59, 0x51, 0x56, 0x92,
	0x3e, 0x08, 0x4b, 0x72, 0x44, 0x6e, 0x4d, 0xee, 0x12, 0x3b, 0xc3, 0xc8, 0x34, 0x90, 0x17, 0xa3,
	0x40, 0x9b, 0xbe, 0x14, 0x68, 0x81, 0xa2, 0x7d, 0xed, 0x6b, 0x9f, 0x0a, 0x14, 0xfd, 0x23, 0xfd,
	0x0b, 0xfd, 0x07, 0xf9, 0x03, 0xc5, 0xcc, 0xce, 0x72, 0x67, 0x2f, 0xa4, 0x2e, 0xce, 0x93, 0x38,
	0xe7, 0x3b, 0x73, 0xce, 0x37, 0xe7, 0x9c, 0x99, 0x39, 0xb3, 0x82, 0x19, 0xb3, 0x6d, 0x65, 0xcd,
	0xb6, 0xb5, 0xdb, 0x76, 0x1d, 0xee, 0xe0, 0xa4, 0xfc, 0x53, 0x75, 0x9a, 0x99, 0xb9, 0xaa, 0xe3,
	0xd2, 0x6c, 0xd9, 0x75, 0x6c, 0x0f, 0xca, 0x2c, 0x4a, 0xc1, 0xbe, 0x63, 0x73, 0xd7, 0xac, 0x72,
	0x25, 0xdc, 0xac, 0x3b, 0x4e, 0xbd, 0x49, 0xb3, 0xd2, 0x8a, 0x6d, 0x3b, 0xdc, 0xe4, 0x96, 0x63,
	0x33, 0x0f, 0x25, 0x3f, 0x0e, 0xc3, 0xb8, 0x41, 0x79, 0xc7, 0xb5, 0x71, 0x05, 0xc6, 0x5d, 0xca,
	0x3a, 0x4d, 0xbe, 0x96, 0xda, 0x4e, 0xed, 0x4c, 0x1a, 0x6a, 0x84, 0x7b, 0x30, 0x5a, 0x75, 0x6a,
	0x74, 0x6d, 0x78, 0x3b, 0xb5, 0x33, 0xbb, 0x77, 0x67, 0xd7, 0xf7, 0xbf, 0xeb, 0xcd, 0xdb, 0x75,
	0x29, 0x6b, 0x3b, 0x36, 0xa3, 0xe7, 0x42, 0xcb, 0x90, 0xba, 0xb8, 0x06, 0x13, 0x2d, 0xca, 0x98,
	0x59, 0xa7, 0x6b, 0x23, 0xdb, 0xa9, 0x9d, 0xb4, 0xe1, 0x0f, 0xc9, 0x9b, 0x61, 0x98, 0x09, 0xcd,
	0xc0, 0x69, 0x98, 0x38, 0x39, 0xdd, 0xdf, 0x2f, 0x9c, 0x9c, 0xcc, 0x0f, 0x61, 0x1a, 0x26, 0x4f,
	0x8a, 0x87, 0x05, 0xc3, 0x38, 0x32, 0xe6, 0x53, 0xb8, 0x01, 0xab, 0xfb, 0x47, 0xa5, 0xb2, 0x91,
	0xdb, 0x2f, 0x9f, 0xbf, 0xc8, 0x3d, 0x2b, 0x1e, 0xe4, 0xca, 0x85, 0x73, 0x0f, 0x1c, 0xc6, 0x15,
	0xc0, 0x1e, 0x58, 0xf8, 0xda, 0x97, 0x8f, 0x20, 0xc2, 0x6c, 0x3e, 0x57, 0x3a, 0x38, 0x2b, 0x96,
	0x9f, 0x2a, 0xd9, 0x28, 0xae, 0xc3, 0xf2, 0xc1, 0xe9, 0xf1, 0x79, 0xd9, 0xc8, 0x95, 0x4e, 0x72,
	0xfb, 0xe5, 0xe2, 0x51, 0x49, 0x41, 0x63, 0x38, 0x07, 0xd3, 0xe5, 0xdc, 0xf1, 0xd1, 0x89, 0x12,
	0x8c, 0xe3, 0x16, 0xac, 0x97, 0x8f, 0x8e, 0xce, 0xf3, 0xc5, 0xc3, 0x04, 0xfd, 0x09, 0xdc, 0x86,
	0xcd, 0x90, 0xf8, 0xeb, 0xe3, 0xa2, 0x91, 0xd3, 0x34, 0x26, 0x85, 0xc5, 0x93, 0x82, 0xf1, 0xa2,
	0x60, 0x9c, 0xe7, 0x4f, 0x4f, 0xbe, 0x99, 0x9f, 0x12, 0x82, 0xa3, 0xf2, 0xd3, 0x82, 0xa1, 0x34,
	0x96, 0xc8, 0x33, 0x98, 0xcd, 0x37, 0x9d, 0xea, 0x4b, 0x83, 0x5e, 0x50, 0x97, 0xda, 0x55, 0x8a,
	0x1b, 0x30, 0x55, 0x11, 0x92, 0x73, 0xbb, 0xd3, 0x92, 0xf1, 0x1f, 0x31, 0x26, 0xa5, 0xa0, 0xd4,
	0x69, 0xe1, 0x16, 0x80, 0x07, 0x36, 0x4c, 0xd6, 0x90, 0x79, 0x48, 0x1b, 0x9e, 0xfa, 0x53, 0x93,
	0x35, 0xc8, 0xaf, 0x60, 0xfa, 0xcc, 0xe2, 0x36, 0x65, 0xec, 0x99, 0xc5, 0x38, 0x66, 0x61, 0xea,
	0xd2, 0x1b, 0x52, 0xb6, 0x96, 0xda, 0x1e, 0xd9, 0x99, 0xde, 0x5b, 0x08, 0x92, 0xa6, 0x34, 0x8d,
	0x40, 0x87, 0x94, 0x60, 0x36, 0xc7, 0x18, 0xe5, 0x45, 0xc6, 0x3a, 0x54, 0x9a, 0xf8, 0x14, 0xc0,
	0xec, 0x49, 0x94, 0x8d, 0xcd, 0xc0, 0x46, 0xa0, 0xed, 0xd7, 0x9a, 0xa1, 0xe9, 0x93, 0x3d, 0x98,
	0x92, 0xab, 0x93, 0xa6, 0x7e, 0x06, 0x63, 0x92, 0xa9, 0xb2, 0x32, 0x17, 0x58, 0xf1, 0x22, 0xe0,
	0xa1, 0xe4, 0xd7, 0x30, 0x57, 0x76, 0x4d, 0x9b, 0x99, 0x55, 0x51, 0x9d, 0x72, 0xe6, 0x63, 0x98,
	0xe6, 0x81, 0x48, 0xcd, 0x5f, 0x0e, 0xe6, 0x6b, 0xfa, 0x86, 0xae, 0x49, 0x3e, 0x80, 0xc9, 0x92,
	0x53, 0xf3, 0x56, 0x72, 0x1f, 0xc6, 0x6c, 0xa7, 0xd6, 0x0b, 0xc4, 0x6c, 0x30, 0x5d, 0xa8, 0x18,
	0x1e, 0x48, 0x1e, 0xc1, 0xa8, 0x18, 0xe2, 0xfb, 0x30, 0x61, 0xd6, 0x6a, 0x2e, 0x65, 0x4c, 0xe6,
	0x20, 0x14, 0xb8, 0x9c, 0x07, 0x18, 0xbe, 0x06, 0x79, 0x08, 0x13, 0x4a, 0x86, 0x08, 0xa3, 0x0d,
	0x87, 0x79, 0x1b, 0x27, 0x6d, 0xc8, 0xdf, 0x42, 0xd6, 0x76, 0x5c, 0x2e, 0xd3, 0x35, 0x66, 0xc8,
	0xdf, 0x64, 0x16, 0xd2, 0x85, 0x56, 0x9b, 0x77, 0x9f, 0xab, 0xcd, 0x70, 0x0f, 0x66, 0x4a, 0x9d,
	0x56, 0x85, 0xba, 0x4a, 0x80, 0xf3, 0x30, 0x12, 0x14, 0x80, 0xf8, 0x49, 0xee, 0x43, 0x3a, 0xdf,
	0xe5, 0x94, 0xf9, 0x1a, 0x4b, 0x30, 0xf6, 0x9d, 0xd9, 0x94, 0x59, 0x11, 0xbe, 0xbc, 0x01, 0x69,
	0xc1, 0x74, 0xd9, 0x6a, 0x51, 0x5f, 0xe9, 0x03, 0x58, 0xac, 0xd0, 0xba, 0x65, 0x17, 0xed, 0xe7,
	0x56, 0xb3, 0x69, 0x31, 0x5a, 0x75, 0xec, 0x1a, 0x53, 0x66, 0x93, 0x20, 0xfc, 0x05, 0x2c, 0x50,
	0xbb, 0x16, 0xd1, 0x1f, 0x96, 0xfa, 0x71, 0x80, 0x7c, 0x0e, 0xa0, 0x32, 0xdc, 0xb2, 0x38, 0x66,
	0x60, 0x92, 0x71, 0xd3, 0xe5, 0xa5, 0xa0, 0x74, 0xfd, 0xb1, 0x38, 0x54, 0xa8, 0x5d, 0x13, 0x88,
	0x67, 0x4c, 0x8d, 0x48, 0x19, 0xe6, 0x43, 0xf9, 0x16, 0x76, 0xee, 0xc3, 0x8c, 0x96, 0xc6, 0x62,
	0x4d, 0x2d, 0x31, 0x2c, 0x14, 0xde, 0x9a, 0x42, 0x3d, 0xb0, 0xd9, 0x1b, 0x93, 0x16, 0xcc, 0xe7,
	0xaa, 0x55, 0xa7, 0x63, 0xf3, 0x63, 0xb3, 0x6e, 0xd9, 0x26, 0xa7, 0x35, 0x99, 0x53, 0x4f, 0x96,
	0x90, 0x53, 0x0f, 0x30, 0x7c, 0x0d, 0x41, 0xd7, 0xb9, 0xb8, 0x60, 0x94, 0xfb, 0x74, 0xbd, 0x91,
	0x88, 0xba, 0x74, 0x22, 0x4f, 0xb3, 0x11, 0xc3, 0x1b, 0x90, 0xef, 0x61, 0x49, 0x44, 0xbd, 0xe7,
	0xcb, 0x0f, 0xbf, 0xa8, 0xdc, 0x20, 0x1b, 0xca, 0xad, 0x5e, 0xb9, 0x01, 0x68, 0xe8, 0x9a, 0x37,
	0x74, 0xff, 0xc3, 0x28, 0x2c, 0xa8, 0x15, 0x94, 0x28, 0xf7, 0x6d, 0x6c, 0xc3, 0xf4, 0x85, 0x4b,
	0x69, 0x89, 0xf2, 0x53, 0x46, 0x6b, 0x2a, 0x21, 0xba, 0x08, 0x09, 0xa4, 0xd5, 0x50, 0xc6, 0x5d,
	0xf9, 0x0a, 0xc9, 0xc4, 0x01, 0xee, 0x5b, 0xf0, 0x7c, 0xfa, 0x43, 0x11, 0xff, 0xde, 0xcc, 0x51,
	0x2f, 0xfe, 0xbd, 0x59, 0x5f, 0x41, 0x5a, 0x9e, 0x03, 0xfe, 0xd4, 0x31, 0xb9, 0xe9, 0x1e, 0xc4,
	0x02, 0x1e, 0xd0, 0xf5, 0xce, 0x12, 0xa5, 0x5f, 0xb0, 0xb9, 0xdb, 0x35, 0x42, 0x26, 0xb0, 0x0c,
	0x33, 0xfe, 0xd8, 0xf3, 0x39, 0x2e, 0x6d, 0xee, 0x5e, 0xc7, 0xa6, 0x9c, 0xe0, 0x19, 0x0d, 0x1b,
	0x11, 0xa5, 0x56, 0x76, 0xb8, 0xd9, 0xec, 0x59, 0x9d, 0x90, 0x2b, 0x09, 0x0b, 0xf1, 0x5d, 0x98,
	0xf5, 0x05, 0x67, 0xd4, 0xaa, 0x37, 0xf8, 0xda, 0xa4, 0x54, 0x8b, 0x48, 0x33, 0x4f, 0x60, 0x21,
	0xb6, 0x0c, 0xb1, 0x95, 0x5f, 0xd2, 0xae, 0x8c, 0xff, 0x94, 0x21, 0x7e, 0x06, 0x5b, 0xd7, 0x0b,
	0xb8, 0x37, 0xf8, 0x78, 0xf8, 0xc3, 0x54, 0xe6, 0x73, 0xc0, 0x38, 0xe7, 0x9b, 0x58, 0xd8, 0xfb,
	0xf7, 0x5d, 0x18, 0x3f, 0x33, 0x9b, 0x4d, 0xca, 0xb1, 0x0e, 0x70, 0x48, 0xb9, 0x8a, 0x0a, 0xc6,
	0xab, 0x3d, 0x13, 0x17, 0x91, 0x47, 0x6f, 0xfe, 0xfb, 0xbf, 0xbf, 0x0c, 0x3f, 0x20, 0x98, 0xbd,
	0x94, 0x46, 0xb2, 0x75, 0xca, 0xd5, 0x9e, 0xf8, 0x38, 0xf5, 0xde, 0xb7, 0x4b, 0x98, 0x00, 0xe0,
	0x0f, 0x29, 0x58, 0xd8, 0x77, 0xa9, 0xc9, 0xa9, 0xb6, 0x95, 0x31, 0x13, 0x39, 0xa1, 0x2f, 0xa8,
	0xeb, 0xdf, 0x12, 0x99, 0xe4, 0xd3, 0x9b, 0xe4, 0xa4, 0xf7, 0x4f, 0xc8, 0xba, 0xef, 0xa4, 0x2a,
	0xad, 0x6a, 0xfb, 0x5e, 0x90, 0xd8, 0xc0, 0xfe, 0x38, 0xfe, 0x21, 0x05, 0x4b, 0x79, 0xd7, 0x31,
	0x6b, 0x55, 0x93, 0x71, 0x9d, 0x4e, 0xb2, 0xcb, 0xcc, 0x7c, 0xb4, 0x8d, 0x21, 0x87, 0x92, 0x44,
	0x8e, 0x6c, 0xfa, 0x4e, 0x2a, 0xbe, 0xb9, 0x08, 0x8f, 0x3b, 0x38, 0x50, 0x05, 0xdf, 0xa4, 0x60,
	0xe6, 0xb4, 0x5d, 0x33, 0x39, 0xf5, 0x73, 0x70, 0x37, 0x16, 0x70, 0x0f, 0xbf, 0x2a, 0x2e, 0x1f,
	0x49, 0x4a, 0x8f, 0xc8, 0xb2, 0xef, 0xaf, 0x23, 0xa7, 0x69, 0x89, 0x59, 0xc5, 0x64, 0x0c, 0xff,
	0x94, 0x02, 0x7c, 0xe1, 0x70, 0xaa, 0xae, 0x7b, 0x9f, 0xc9, 0x56, 0xe0, 0x48, 0x43, 0xaf, 0xe2,
	0xb1, 0x2f, 0x79, 0x7c, 0x46, 0x32, 0xbe, 0xaf, 0xef, 0x1c, 0x4e, 0x55, 0xff, 0xa0, 0x91, 0xd9,
	0xc4, 0x01, 0x0a, 0x22, 0x43, 0xf3, 0x5e, 0xb5, 0x04, 0xed, 0x03, 0x0e, 0x6c, 0x2a, 0xfa, 0xd1,
	0x79, 0x22, 0xe9, 0x7c, 0x44, 0xd6, 0xc2, 0xe5, 0x20, 0x77, 0xb8, 0x25, 0x0c, 0x08, 0x32, 0x19,
	0xec, 0x0b, 0x6b, 0x19, 0x52, 0x01, 0xd0, 0x33, 0xa4, 0x44, 0x6f, 0x95, 0x21, 0xb5, 0xf4, 0xc4,
	0x0c, 0x29, 0x4c, 0x92, 0x50, 0xf1, 0xe8, 0x5b, 0x26, 0x1e, 0x7e, 0x63, 0x12, 0x6a, 0xc1, 0x89,
	0x65, 0x12, 0xc2, 0x34, 0x12, 0xfd, 0x23, 0xf1, 0x56, 0x24, 0x92, 0x23, 0x11, 0xc2, 0x24, 0x09,
	0xff, 0xa8, 0x90, 0x55, 0xa0, 0x93, 0x08, 0x01, 0x37, 0x26, 0xc1, 0xd5, 0x6c, 0x99, 0xfc, 0x08,
	0x89, 0x10, 0x86, 0xff, 0x48, 0xc1, 0xf2, 0xb1, 0xe9, 0x72, 0xab, 0x6a, 0xb5, 0xc3, 0x35, 0xfa,
	0xf3, 0xc0, 0x57, 0xa2, 0xc2, 0x55, 0xa4, 0x8a, 0x92, 0xd4, 0x3e, 0xd9, 0xf2, 0x1d, 0xb7, 0x03,
	0x2b, 0xe1, 0x9a, 0xbd, 0x8b, 0x83, 0x75, 0x64, 0xa4, 0xbe, 0x70, 0x29, 0x7d, 0x4d, 0xf3, 0x66,
	0xd3, 0x14, 0xef, 0x06, 0x2d, 0x52, 0x21, 0xe0, 0xc6, 0x91, 0xba, 0x90, 0xb3, 0x2b, 0xde, 0xec,
	0x48, 0xa4, 0x42, 0x18, 0xfe, 0x31, 0x05, 0x73, 0xa7, 0xf6, 0x45, 0x88, 0xc6, 0xbd, 0xc0, 0x4b,
	0x04, 0xba, 0x8a, 0xc8, 0x67, 0x92, 0xc8, 0x63, 0xb2, 0xda, 0xdb, 0x25, 0x76, 0x8c, 0xca, 0x3a,
	0xf6, 0x43, 0xbd, 0xad, 0xac, 0x64, 0xb1, 0xda, 0x09, 0x01, 0x37, 0xdf, 0xca, 0x6a, 0x76, 0x52,
	0xed, 0x84, 0x30, 0x19, 0x91, 0x33, 0x8b, 0x37, 0x6a, 0xae, 0x79, 0x99, 0x10, 0x91, 0x08, 0x74,
	0xe3, 0x88, 0x5c, 0xaa, 0xf9, 0xc9, 0x11, 0x89, 0xa0, 0xf8, 0x1a, 0xa6, 0xd5, 0xed, 0x23, 0xb9,
	0x69, 0x27, 0xbe, 0x26, 0xbe, 0x8a, 0xc3, 0x2f, 0x25, 0x87, 0x2c, 0x59, 0x8c, 0xdc, 0x2e, 0x7e,
	0x28, 0x96, 0x31, 0x09, 0xc1, 0xdf, 0xc2, 0x94, 0x78, 0x75, 0x89, 0xb7, 0x14, 0xc3, 0x95, 0xc0,
	0xb4, 0xfe, 0xe8, 0xc9, 0x60, 0xf8, 0x0d, 0x26, 0x26, 0x90, 0x87, 0xd2, 0xdf, 0xfb, 0x64, 0xc1,
	0xb7, 0xda, 0xb4, 0x18, 0x97, 0x6f, 0x33, 0xe1, 0x6d, 0x11, 0xe3, 0x72, 0xfc, 0x73, 0x0a, 0x56,
	0x44, 0x9f, 0xd3, 0xdb, 0x87, 0xf9, 0xee, 0x80, 0x9e, 0x67, 0x2d, 0xe9, 0xa2, 0x91, 0xae, 0xbf,
	0x94, 0xae, 0x0b, 0xe4, 0x8e, 0xde, 0xe1, 0xf4, 0xb6, 0x5c, 0xa5, 0xab, 0x1d, 0xa3, 0xdb, 0x78,
	0x85, 0x12, 0xbe, 0x86, 0x99, 0xa0, 0xf7, 0x2a, 0xd1, 0x44, 0x2a, 0x1b, 0x03, 0x5a, 0xd7, 0x78,
	0x15, 0x06, 0xfd, 0x96, 0x1d, 0xab, 0xc2, 0x10, 0x26, 0x02, 0xb2, 0x18, 0x09, 0x48, 0xc9, 0x6c,
	0x51, 0x3d, 0x0f, 0xfa, 0x4b, 0x32, 0x33, 0xf0, 0xee, 0x25, 0x05, 0x49, 0xe4, 0x09, 0xd9, 0xe8,
	0xb3, 0x62, 0xdb, 0x6c, 0xc9, 0x4a, 0xdc, 0xc2, 0x41, 0x1a, 0xd8, 0x82, 0xe9, 0x43, 0xca, 0x4b,
	0xce, 0xa5, 0x7c, 0x2f, 0xf6, 0xad, 0x89, 0xe8, 0x67, 0x81, 0x78, 0x01, 0xd6, 0x29, 0xb7, 0x9d,
	0x4b, 0xf9, 0xb1, 0x20, 0x52, 0x80, 0x1a, 0x82, 0x5c, 0xc6, 0x5f, 0x9a, 0xc8, 0x77, 0xc5, 0xfb,
	0x73, 0x55, 0x2b, 0x36, 0xfd, 0xa5, 0x1d, 0xf7, 0x98, 0x14, 0x79, 0x69, 0xb4, 0xd2, 0xb5, 0x3b,
	0xad, 0x78, 0xe4, 0x03, 0x0c, 0xdb, 0x90, 0x0e, 0xbc, 0x16, 0x6b, 0x7d, 0x23, 0x1e, 0xf3, 0xf9,
	0x58, 0xfa, 0x7c, 0x48, 0x96, 0xe2, 0x76, 0xad, 0x9a, 0x70, 0xb9, 0x82, 0x89, 0x10, 0xfe, 0xde,
	0xcb, 0xb5, 0x72, 0x29, 0xdf, 0x0c, 0x25, 0xfa, 0x8a, 0xe3, 0x52, 0xc4, 0x83, 0x44, 0x32, 0x8b,
	0x31, 0x29, 0x4b, 0x4e, 0xb0, 0x72, 0x20, 0x9f, 0x97, 0x36, 0x7d, 0xc5, 0xe3, 0x09, 0x8e, 0x6a,
	0x88, 0xb3, 0x4f, 0x67, 0x62, 0x72, 0xca, 0xf8, 0xc0, 0xc0, 0xdf, 0x98, 0x8c, 0x34, 0xa9, 0x52,
	0x90, 0x4c, 0xc6, 0xd7, 0x10, 0x3d, 0x26, 0x1e, 0x52, 0xbd, 0xff, 0x1f, 0x98, 0x8f, 0xeb, 0xb6,
	0xbb, 0x75, 0xaa, 0x37, 0xf8, 0x7e, 0x6e, 0xb4, 0x76, 0x37, 0xae, 0x80, 0x5d, 0x98, 0x11, 0x2b,
	0x3b, 0xf3, 0xbf, 0xb2, 0xf5, 0x2d, 0xfd, 0xe5, 0x58, 0xc3, 0x25, 0x23, 0x12, 0x2b, 0x47, 0x71,
	0xf2, 0xf5, 0xbe, 0xd9, 0x45, 0xca, 0x31, 0x84, 0x89, 0x28, 0x2c, 0x84, 0x0e, 0x02, 0xf9, 0x25,
	0xac, 0x9f, 0xff, 0xfe, 0x27, 0x63, 0xec, 0x59, 0x16, 0xda, 0xe0, 0xc2, 0x67, 0xe4, 0x59, 0x16,
	0xc3, 0xf1, 0x77, 0x29, 0x98, 0x97, 0x8f, 0x65, 0xfd, 0x49, 0xd6, 0x8f, 0x49, 0xbf, 0x92, 0x89,
	0x37, 0xfc, 0x5c, 0x98, 0x8c, 0x3c, 0xcb, 0xb4, 0x86, 0x3f, 0x0a, 0xe3, 0x5f, 0xbd, 0xbb, 0x42,
	0x6c, 0x91, 0xe7, 0xa6, 0x65, 0x73, 0x6a, 0x8b, 0xab, 0xb2, 0x6c, 0x85, 0x4f, 0xc7, 0xeb, 0x91,
	0x49, 0xba, 0x2f, 0xc4, 0x4e, 0x68, 0x05, 0x86, 0xb9, 0xe5, 0x9d, 0x8d, 0xe1, 0xfb, 0x22, 0x41,
	0x69, 0xef, 0x3f, 0x63, 0x30, 0xeb, 0x3d, 0xdb, 0x4f, 0x9c, 0xa6, 0x55, 0xb3, 0x78, 0x17, 0x2f,
	0x6f, 0xf1, 0x7c, 0x8f, 0x56, 0x2c, 0x53, 0xc6, 0x22, 0xcf, 0xf8, 0xa0, 0x62, 0x13, 0x14, 0xc4,
	0x73, 0xfe, 0xed, 0x4a, 0x36, 0xda, 0xe8, 0xf6, 0x9c, 0xc4, 0x4a, 0x37, 0x68, 0x74, 0x93, 0x75,
	0xf0, 0x6f, 0x3f, 0x51, 0x09, 0x7f, 0x25, 0x29, 0x7d, 0x49, 0xee, 0x25, 0xad, 0x3b, 0x56, 0xca,
	0xef, 0xe0, 0xd5, 0x7a, 0xf8, 0xfd, 0x2d, 0x6f, 0xb4, 0xe8, 0x11, 0xa7, 0xbb, 0xd0, 0x6f, 0xb6,
	0xe0, 0x88, 0x4b, 0xd2, 0x10, 0x3b, 0xea, 0xd6, 0x57, 0x5c, 0xdf, 0x04, 0xc5, 0xae, 0xba, 0x84,
	0x04, 0x85, 0x74, 0xf6, 0x7e, 0x1c, 0x86, 0x39, 0xaf, 0x70, 0x0b, 0xaf, 0x38, 0xb5, 0x99, 0xd8,
	0x65, 0xff, 0x4a, 0xc1, 0x6a, 0xf8, 0xf4, 0x65, 0x5f, 0xb8, 0x4e, 0xab, 0xdc, 0xb0, 0x98, 0xfe,
	0x55, 0x28, 0xfa, 0x85, 0x36, 0xb3, 0x9e, 0x78, 0x0c, 0xcb, 0xfc, 0x9d, 0x4b, 0xc6, 0xdf, 0x90,
	0x1d, 0xc5, 0x86, 0xfa, 0xce, 0x22, 0x47, 0x2e, 0xbb, 0x70, 0x9d, 0x16, 0x6f, 0x58, 0xb2, 0xba,
	0xde, 0xc3, 0x6b, 0xab, 0xe3, 0x3f, 0x53, 0xb0, 0x1c, 0xe1, 0x5c, 0x76, 0xde, 0x86, 0xf1, 0x6f,
	0x24, 0xe3, 0x53, 0xf2, 0xee, 0x55, 0x14, 0xb8, 0xe3, 0xf3, 0xdd, 0xc1, 0x6b, 0x2a, 0xef, 0xfd,
	0x7d, 0x18, 0x26, 0x0f, 0x4c, 0x6e, 0x56, 0x4c, 0x46, 0xf1, 0x10, 0x16, 0xea, 0xaa, 0x10, 0x82,
	0xff, 0x23, 0x5d, 0x63, 0x8b, 0x84, 0x67, 0x90, 0x21, 0x7c, 0x0e, 0x4b, 0x87, 0x94, 0x1f, 0x88,
	0x86, 0xcd, 0xaa, 0x1e, 0xbb, 0x4e, 0x9b, 0xba, 0xdc, 0x1a, 0xb0, 0xfd, 0xb5, 0x06, 0x36, 0x36,
	0x89, 0x0c, 0xe1, 0x87, 0xb7, 0xdc, 0x20, 0x43, 0xf8, 0xc9, 0xed, 0x4b, 0x7b, 0x68, 0x6f, 0x4a,
	0x7e, 0xb1, 0xbe, 0x74, 0xdc, 0x97, 0xf9, 0x4f, 0x21, 0xed, 0xb8, 0xf5, 0x5d, 0xee, 0x3a, 0xf6,
	0xae, 0xd9, 0xb6, 0xf2, 0x13, 0x87, 0x6e, 0xbb, 0x9a, 0x3b, 0x2e, 0x7e, 0xfb, 0x4e, 0xdd, 0xe2,
	0x8d, 0x4e, 0x65, 0xb7, 0xea, 0xb4, 0xb2, 0xcc, 0x64, 0xe6, 0x2b, 0x8b, 0x66, 0x85, 0xd6, 0x83,
	0x96, 0x63, 0x5b, 0xdc, 0x71, 0xb3, 0x66, 0xdb, 0xaa, 0x8c, 0x4b, 0xd3, 0x8f, 0xfe, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x11, 0xae, 0xac, 0xc6, 0x78, 0x1d, 0x00, 0x00,
}
